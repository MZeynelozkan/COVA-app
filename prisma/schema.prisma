datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  collections   Collection[] // Kullanıcının oluşturduğu koleksiyonlar
  savedCollections Collection[] @relation("SavedCollections") // Kaydedilen koleksiyonlar

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Collection model
model Collection {
  id             String          @id @default(cuid())
  name           String
  createdAt      DateTime        @default(now())
  type           CollectionType
  savedCount     Int             @default(0)
  specification  String?
  userId         String
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedByUsers   User[]          @relation("SavedCollections")
  items          Item[]          @relation("CollectionItems") // Prisma otomatik ara tablo oluşturur
  coverImg       String?

  @@unique([name, userId])
}

model Item {
  id           String       @id @default(cuid())
  name         String
  image        String
  link         String
  collections  Collection[] @relation("CollectionItems") // Prisma otomatik ara tablo oluşturur

  createdAt    DateTime     @default(now())
}


// Enum for collection types
enum CollectionType {
  ART
  PRODUCT
  MUSIC
}
